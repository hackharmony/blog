---
layout: page
title: Software Recommendations
subtitle: A curated list of the best software, programming languages, or development tools you should choose depending on your use case
---

#+OPTIONS: toc:t h:8
* Abstract
This is a curated collection of software that I recommend and brief reviews. It’s basically your ultimate guide to computing effectively. I have a bias toward software with free and open source licenses. Where I choose proprietary alternatives otherwise is always for very good reason.
* Operating system
Use the right tool for the job. It all really depends on what you are doing, so instead of recommending one OS over all others, I will review each of them based on my experience with them. I have used all major operating systems. The top 3 OSes (macOS, GNU/Linux, and Windows) are all part of my regular usage, and all have their uses.

1. macOS
2. GNU/Linux
3. Windows 10
4. *BSD
* Web browser
** Chromium (or Google Chrome)
As much as I wanted to like Mozilla Firefox, I have stopped fighting the trend. Every website out there is developed to target WebKit browsers first. There is no competing with the massive resources and mindshare directed at Chromium development. This means more than just better superficial features—it means better security updates. Chrom{e, ium} has the best dev tools for web development.

Prefer Chromium over Google Chrome. Why? It has slightly less spyware built in, and you are free to compile it yourself in the spirit of free software.
* Text editor / IDE
** editor
Yes, it’s time for that childish argument.
*** GNU Emacs
I know it’s [[https://en.wikipedia.org/wiki/Imprinting_(psychology)#Baby_duck_syndrome][baby duck syndrome]], but I ♥ Emacs and will never stop using it. Thanks to [[https://langserver.org][Language Server Protocol]] you can get feature parity with VS Code/Atom and other flavor-of-the-month editors. So I’m happy. (But that’s still quite long way from a real IDE like Visual Studio for C++.)

You can survive in Emacs by writing long bits of code in Emacs while having an IDE open in the same project for doing everything else.
*** Vim
Vim is what I originally started with. It’s great but you’ll find yourself wanting more features than just a text editor.
** IDE
*** Visual Studio
If you are doing any kind of development for Windows systems, you would be a fool to use anything but Visual Studio. (N.B., I’m not talking about /Visual Studio Code/. I’m not a fan of VS Code.)

Visual Studio is hands down the best C++ IDE ever.
*** XCode
*** Eclipse?
* Shell
** bash
** zsh
** Python or Ruby
If you have to write a script that will ever be used again in the future by you or someone else, then don’t write it in shell script. Please use Python or Ruby (not Perl—that’s as unreadable as shell). Shell script is for one-off actions.

Shell scripts aren’t “real” languages. They don’t have utilites for abstraction beyond just subroutines. Shell scripts aren’t maintainable. It’s a lot harder to read shell script. Everyone knows Python and Ruby. Use one of those.

- Everyone knows Python and Ruby
- Python and Ruby are readable
- Python and Ruby are maintainable
- Python and Ruby can make system calls directly instead of forking processes for every line of code; much better performance

There are some people who use IPython as their system shell and never touch bash. I think that’s a little extreme, but it’s certainly possible.
* Programming languages
/“Use the right tool for the job!,”/ you hear condescendingly from the mature people whenever you talk about favorite programming languages. But I think this view is dated in today’s world since there are several competing popular languages/environments for every domain of software development. Some of them have to be objectively bad, the metric being their amenability to producing good software. I don’t and can’t accept the idea that X language is /just as good/ as Y no more than I accept that PHP and Python are on the same level because they’re both Turing complete.
** TODO For the pedantic: Languages vs. Runtimes
** How to judge programming languages
You judge programming languages by judging the programs that have been developed using it. And the way you judge programs is by seeing the market response by the users of those programs.

The /worst/ way to judge a programming language is to judge it by how it relates to programmer sensibilities. What a programmer (no matter what skill level) thinks the best language is, is barely a relevant question. They don’t matter. The bad programmers will say the language they have used the most because they only know one or two languages. The good programmers will tell you Haskell is the best language because they see programming as a fun intellectual game rather than an industrial endeavor like drilling for oil. In general, you shouldn’t judge a field by what the people within the field say because it will eventually lead to abstract academic bloviating divorced from any real world stress-testing that an exposure to actual users would reveal.

The older a programming language, the better. If an old language is still being used enough for you to care about it, it survived brutal selection in the free market. You win no points by being an early adopter of a technology tool, only a massive risk of your precious time. Joe Programmer can just as easily pick up your pet tool a few years down the line if it miraculously lasts that long and gains traction. Within a couple months, Joe Programmer now is [[https://en.wikipedia.org/wiki/Pareto_principle][80%]] as functionally skilled as you are. On this basis I would argue that you are better off learning COBOL and FORTRAN than any language created in the past 10 years. More on this in other writings.

Last on the list, I consider the /aesthetics/ of the language to be important. I’m not talking about syntax per se. Code in an Aesthetic Language gives you a feeling of freedom and makes you happy to see it. An Aesthetic Language makes it very easy to write easy-to-read code. You /feel/ like you can do anything with the language because the syntax isn’t holding you back. The most Aesthetic Language that comes to mind is Common Lisp---you are stripped of all the limitations of traditional structured programming languages and are free to express yourself in constructs you make yourself (Lisp macros). Ruby is also an Aesthetic Language. By contrast, an Ugly Language is C because everything is either an if statement, a glorified goto/jump, or a for loop, forcing you to encode your solution space in this tiny vocabulary as if you’re an assembly programmer from the 1970s. This is completely my personal take; feel free to dismiss this aspect of programming language selection. But I’d rather live in a world with less PHP even though PHP is probably one of the top 3 programming languages by the amount of wealth generated (read: Facebook).
** Languages
*** by use case
**** large projects
1. C++
2. Java
**** scripting
1. Ruby
2. Python
3. Lua
**** science/stats/machine learning
1. Python
2. Mathematica
3. C++
**** web services
1. Golang
2. Java
3. Ruby
**** doing something new and revolutionary
1. C++
2. Common Lisp
3. Rust
*** Reviews
**** C++
I love C++. Why? Because you’re running a program(s) written in C++ to read this right now. It’s faster than everything, and it can do everything better than anyone else can. It can go as low level as inline ASM, backwards compatibility with C, then all the way up to modern Python-esque abstraction facilities. It has features for everything, the whole kitchen sink, and that’s a good thing.

I don’t care how hard it is to use. The ends justify the means here.

100 years from now I guarantee you, barring civilizational collapse, you will still be using C++ binaries and there will still be people writing C++.
**** Common Lisp
***** recommended implementation
SBCL
***** If LISP is so good, why did it fail?
- [[https://groups.google.com/forum/#!topic/comp.lang.lisp/eicqvm3GXiE][The Bipolar Lisp Programmer]]
- [[http://winestockwebdesign.com/Essays/Lisp_Curse.html][The Lisp Curse]]
- [[https://www.jwz.org/doc/worse-is-better.html][Worse Is Better]]
**** Scheme
***** best implementations
****** Chez Scheme
- Compiles to very efficient machine code; ideal for deployment
- Used by Cisco for years before they open sourced it
- Author is a genius
****** GNU Kawa
- Compiles to portable JVM bytecode
- Entire JVM ecosystem available with convenient interop syntax
****** Racket
- Easiest to get started with
- Con: Not really Scheme. Tries too hard to be a functional language. (Scheme and LISP style languages in general are /not/ functional languages, nor should they be.)
**** Golang
Golang is basically a DSL for writing web servers and web services. It is /phenomenal/ at this. Golang gives you all the batteries you need to write very good web and networking software and the battle-testedness that comes with it being used by big corporations for this purpose.

You shouldn’t use it for much else though. Well, it’s good as an alternative to Python for when you need a binary and non-molasses performance.
**** JavaScript
**** Java
Java gets far too much hate. It’s the best language and ecosystem for almost 99% of applications.
**** Ruby
**** Python
**** Mathematica
**** Rust
**** Haskell
*** Trash Languages
**** C
The triumph of C was one of the greater tragedies in the history of computing (and perhaps the history of humanity). The entire computer security industry would not exist without C. It is broken by design. Programmers having access to pointers to raw memory was a mistake. C is behind every security vulnerability or software crash that cost society trillions of dollars or countless human lives whenever critical systems have crash for “unknown” reasons. Every C programmer thinks he or she is going to be the one who is smart enough to never make these serious mistakes; they laugh when you tell them to sacrifice a tiny bit of performance for a memory/type safe language instead. Nah, Python and Java are for wimps.

The worst part is that the C mental model isn’t even how CPUs work anymore. Where’s the C semantics for minimizing cache misses? Or SIMD opcodes? Or GPU programming? You have to use compiler extensions and vendor specific DSLs. Compiler authors have worked very hard to infer educated guesses about the correct instructions from C code, because C code is unable to express these intents. C as a language is hardly “close to the metal”---it’s only so by accident because the compilers are so advanced.

Don’t use C. Boycott C. Use modern C++20 and get literally the exact same performance at significantly less risk for catastrophic failure.
**** Visual Basic.NET
I have never used this one, but I still feel entitled to badmouth it because it’s BASIC after all.
**** PHP
Spaghetti code. Spaghetti code everywhere.

The most important thing to learn from PHP, as a programming language critic, is how important Time To Hello World is. PHP owes basically all of its success to the fact that you can, with minimal to zero configuration on most servers, write something like this:

#+BEGIN_SRC php
<html><body><h1>Welcome,
<?php
$s = $mysqli->prepare("select name from customers where id=?");
$s->bind_param("i", $_GET["id"]);
$s->execute();
$row = $s->get_result()->fetch_assoc();
echo $row["name"];
?>
</h1></body></html>
#+END_SRC

...and just like that, you can hack together the controller, model, and view for a webapp all in one go. Of course for anything non-trivial, this could easily and does get out of hand.

There is no technical reason for the language’s success. It has more warts than JavaScript did in the Internet Explorer days. I’m convinced its adoption is just because LAMP servers were so widely deployed in the 2000s, and anyone could get started with PHP without having to fiddle with compilers, build scripts, external libraries, or any of the things used in contemporary software development. It was the Visual Basic for the web.

If I were designing a programming language hoping for it to be widely adopted, I would make sure it passes the PHP Test: /Does it let me bootstrap a webapp (or perhaps a mobile app) just by writing one text file and uploading it somewhere?/
**** Perl
Dead camel
**** Clojure
Clojure is not LISP. It sacrifices way too much to run on the JVM. (Not that I think being a hosted language was a bad idea---it just should have been LLVM.) Clojure is an internal tool used by Rich Hickey’s database company. It’s slower than Java. No one is adopting it. Expect to spend a lot of time reading the source of Clojure to figure out how all the black boxes work. Use it at your own risk.

If you really need to use a LISP and can’t use SBCL/LispWorks/etc. for some reason, go for Clojure of course. But you don’t /really/ need to use LISP unless you can also use SBCL. I fail to see the motivation for using this.
*** Useless But Fun Hobby Languages
Only devote time to these if you literally have nothing better to do, or are doing a Ph.D. on programming language theory. They explore very interesting ideas, but rest assured, these ideas will be incorporated in mainstream languages if they are proven good enough.
**** Haskell
The most important thing you can learn from Haskell is when to give up learning something.

Haskell is a very beautiful language, but with the mental energy required to get good at it, you could have done so many other things. Personally, I learned the basics of the language up until I got to lenses and monad transformers; then I gave up, putting it on hold until some future time. On top of the core language, there is also the ever-growing [[https://wiki.haskell.org/Language_extensions][Haskell language extensions]], which Haskell programmers actually make frequent use of. There is basically no end to the rabbit hole for Haskell. Some people have written Haskell for 5+ years and still haven’t grasped the whole thing. It’s absolutely daunting with little real use cases to motivate you to keep learning.

Some consolation: Even if you are a wizard at Haskell, you won’t be able to write many useful programs with it—comfortably—because of how awkward it is at handling side effects. Network connections, IO on databases, drawing graphics, interacting with hardware—this is the bread and butter of real world programming. Have fun doing that in Haskell all day.

Since everyone touts Haskell “because it makes you a better programmer,” why not get that benefit without wasting time trying to write programs in Haskell? Just learn these memes:

- currying
- functors
- applicative functors
- fmap, join, bind; [[https://en.wikibooks.org/wiki/Haskell/Category_theory][elementary category theory]]
- [[https://wiki.haskell.org/Typeclassopedia][monads]]
**** Idris
Dependent types are potentially a game changer. Problem is, I can’t think of many practical uses for them aside from the canonical example of vector bounds checking.

Speaking completely from ignorance, I feel like a lot of the promises from the functional programming world smell like [[http://wiki.c2.com/?GoldenHammer][GoldenHammer]] propositions. Everyone wants some magic tool to prevent them from writing bugs.
**** Scheme
Read SICP.
**** CoQ
* Databases
** RDBMS
*** PostgreSQL
** In-Memory Cache
*** Redis
** Embedded
*** SQLite3
*** LMDB
* Fonts
** serif
*** Charter
Ideal for body text. I believe that serif fonts are more readable. Charter is one of the best serif fonts I have come across, and it’s available for free.
*** Publico Text
** monospace (for code)
*** Go Mono
[[https://blog.golang.org/go-fonts][Go Mono]] is part of a family of fonts from the Golang team. Unlike any other monospaced
*** Fira Mono
*** Operator Mono
The Lamborghini of programming fonts. This is, as of the time of writing, [[https://www.typography.com/fonts/operator/styles/][the most expensive programming fonts]]. It does look good.
*** IBM Plex Mono
*** Menlo
** sans serif
*** Adelle Sans
*** San Francisco
* Multimedia
** editors
*** audio
*** video
Adobe Premiere Pro
*** photos
Adobe Photoshop
** players
*** video
mpv
*** audio
**** Windows
foobar2000
**** GNU/Linux
Clementine (?)
* Office
** Word processor
*** academic
\( \LaTeX \)
*** lightweight markup
org-mode all the way. Markdown is trash.
*** everything else
Microsoft Word. Don’t fight the world by using LibreOffice, Pages, Google Drive, or whatever you think is acceptable.
** Presentation
Apple Keynote
** Spreadsheet
Microsoft Excel
** Email client
Mozilla Thunderbird
** On LibreOffice
LibreOffice is horribly bad. I guess it’s good that Linux users have /some/ native office clients. It gets the job done—barely. But unless you’re Richard Stallman, just boot into Windows and use Microsoft Office and save your time.
* Cryptocurrency
** Bitcoin ($XBT)
- First mover advantage
- Historical value
- Digital gold; store of value
- Capped supply motivates a game theoretic boost in its market value
** Monero ($XMR)
This is one of the best cryptocurrencies and probably the only one besides Bitcoin that will still be used in 20 years. Monero implements the ideal of cryptocurrency as an anonymous, fungible, censorship-resistant electronic cash.
** Ethereum ($ETH)
[[https://blog.bitmex.com/ether-a-double-digit-shitcoin/][Scam]]. It’s based on this idealistic “world computer” meme that while interesting has no reason to involve currency at all except to be a cash grab. Smart contracts are a joke—I can much more easily implement “smart contracts” using fiat and traditional payment gateways than by using some decentralized mess.
*** the JavaScript problem
The idea of smart contracts is to have programs running on a P2P network that decide to spend a certain amount of Ethereum tokens. Problems:

- Ethereum uses a JavaScript VM.
- An anonymous person’s Turing complete code runs on anonymous people’s computers.
- You can’t fix bugs in a smart contract once it’s deployed because it’s immutable in the blockchain.

When someone tells you they want to manage everyone’s /money/ using /JavaScript/, you turn the other way and get out of there as fast as possible. Millions of dollars (of real money—USD) have been lost already to Ethereum bugs, and there will always be more in the future. All programs have bugs. I would have had more confidence in smart contracts had Ethereum used something like CoQ or Agda—formal proof verifying languages (don’t compile if the proof is wrong)—rather than their DSL sitting on top of JavaScript, an extremely fragile and type unsafe interpreter that probably is more likely to result in bugs than any other contemporary language runtime.
*** the “smart contracts” problem
We don’t /need/ Ethereum to create the utility of a smart contract. Ethereum advocates argue that it would be used to validate transactions in exchange for X without a third party. Suppose a vending machine executes a smart contract with you that only spends your Ethereum once it has dispensed your snack. Or suppose a driverless Uber only charges you once you have been dropped off. Or suppose Alice only pays Bob once Bob has paid Paul (note: this is the only scenario currently possible on Ethereum because the only information the smart contract has is the blockchain/transaction history).

All of these things can be done much more efficiently with a program running in a data center somewhere—and at least a company could update or terminate the code when a bug is discovered.

“But that’s not trustless and decentralized because I have to trust a central authority!” You are /always/ going to have to trust a counterparty when you are buying a good or service. >99.999% of transactions are done with companies; this is not likely to change ever, so the assumption is that smart contracts would be adopted by companies. Here are all the ways you still have to /trust/ someone: You would have to…

1. trust that the company is reporting accurate information to the smart contract,
2. trust that the company wrote the smart contract to not rob you (as if most people could even read the code themselves 🙄),
3. trust that the company wrote the code without any bugs at all, ever, and
4. trust that the Ethereum network wouldn’t get 51% attacked or otherwise exploited at any point during the execution of your smart contract.

The sacrifices you would have to make for the Ethereum dream to work could only ever be taken up by someone with a radical political conviction in favor of it, not by any rational actor who seeks to maximize well-being. It has a significant real cost in order to solve  a non-existent imaginary problem.

If people have a choice between some business practice that can potentially lose a ton of money and another that has almost no chance of that (centralized payment infrastructure), they will /always/ choose the one that won’t lose them money.
*** decentralized apps “dApps”
This is part of the “world computer” meme. Ethereum wants to create decentralized programs running on the Ethereum P2P network. The only successful example of this is [[https://en.wikipedia.org/wiki/CryptoKitties][a video game about cats]] that crashed the network (because who would have guessed…a bunch of users running a program on everyone’s computers has n×m complexity and is super inefficient).

The problem: /It costs money every time you interact with a dApp./

A dApp can’t function as, say, an alarm clock, because an Ethereum dApp only wakes up once someone pays money to it.

If a rational human has a choice between paying for running software and an alternative that is free (centralized apps), they will /always/ choose the one that is free.
*** scam ICOs
I have a lot of respect for the creator of Ethereum. I think he had good intentions for the project, but unfortunately, the community seems to have been taken over by scammers looking to exploit the public’s greed for quick cash grabs (ICOs). The SEC explains [[https://www.sec.gov/ICO][the scam that is ICOs]] better than I could.
** Grin/MimbleWimble
Very promising technology in its infancy. It’s staunchly not a scam cash grab like nearly every other alt coin. It was designed to be used as trustless and anonymous cash. Since it has permanent inflation, it is unlikely to ever inspire a Ponzian sentiment and attract hoarders who would drive up the price. It’s most likely going to go to zero, and that’s a shame.
