---
layout: page
title: Software Recommendations
subtitle: A curated list of the best software, programming languages, or development tools you should choose depending on your use case
---

#+OPTIONS: toc:t h:8
* What is this?
This is a curated collection of software that I recommend and brief reviews. It‚Äôs basically your ultimate guide to computing effectively. I have a bias toward software with free and open source licenses. Where I choose proprietary alternatives otherwise is always for very good reason.
* Operating system
Use the right tool for the job. But‚Ä¶

GNU/Linux > Windows 10 >>>> macOS

This goes against the orthodoxy of Apple everything. I think macOS is trash. One very important job of an operating system is to interface with hardware. I can‚Äôt run it on >99% of software, only Apple‚Äôs approved machines. Therefore it‚Äôs a horrible OS, failing at the most important job of an operating system.

It‚Äôs time for Apple and Microsoft to stop duplicating effort. There is no reason for humanity to duplicate effort on something as boring as a kernel. Gains from competition aren‚Äôt relevant in this field because everyone needs the kernel to work for actual business. Trillions of dollars depend on Linux working; it‚Äôs forever. It‚Äôs already on 90% of smartphones. Let‚Äôs get Microsoft and Apple to port their userspace to Linux.
* Web browser
** Chromium
There is no competing with the massive resources and mindshare directed at Chromium development. This means more than just better superficial features‚Äîit means better security updates too. Chrom{e, ium} has the best devtools.

Just turn off the spyware.
** Mozilla Firefox
It is basically abandonware at this point. Again, we need to stop replicating effort. This isn‚Äôt the same thing as Internet Explorer; we are well past that. Mozilla devs should start working on Chromium so we can all benefit.
* Text editor / IDE
** editor
Yes, it‚Äôs time for that childish argument.
*** Visual Studio Code is the best text editor
I still use Emacs, but any serious work has to be done in an IDE or Visual Studio Code. You are literally only hurting yourself if you only ever want to use Emacs or Vim.
*** GNU Emacs
I know it‚Äôs [[https://en.wikipedia.org/wiki/Imprinting_(psychology)#Baby_duck_syndrome][baby duck syndrome]], but I +like+ can bear with it.

Thanks to [[https://langserver.org][Language Server Protocol]] you can get feature parity with VS Code/Atom and other flavor-of-the-month editors. So I‚Äôm happy. (But that‚Äôs still quite long way from a real IDE like Visual Studio for C++.)

Pros:
- Fully programmable with Emacs Lisp---no need to wait for an IDE vendor to come out with a feature you wanted because you can write it yourself with Emacs‚Äôs comprehensive API
- You can do almost everything in Emacs---it‚Äôs its own little OS not unlike Chrome
- Productivity gains are near permanent because you can take Emacs with you everywhere. Let‚Äôs say you learned something new about Emacs or wrote a Lisp function that lets you shave off 10 minutes from your daily workflow. That one improvement that took you a few minutes to hack together can add up to weeks of time saved over your entire career, freeing up more time to improve your workflow even more (that‚Äôs how much Lispers love recursion).
- Will be around in 10, 20, 30, 40 years from now and still have a community of maintainers and active users. Will your fad IDE still be used? Will the company sponsoring it even exist by then?
- Hacking on Emacs is fun and a great way to waste time
Cons:
- Default keybindings are inherently RSI-inducing. For your health, use completely different keybindings for editing. I use evil-mode to emulate Vim‚Äôs objectively superior keybindings. Most RSI comes from doing complicated key chords where you have to hold down multiple far away keys at once. Avoid/remap key chords where possible and/or use Sticky Keys.
- The kernel code is very old. It‚Äôs very complicated, spaghetti-ish C code.
- The Elisp interpreter is /sloooow/. Legit slower than Ruby.
- Graphical Emacs is very buggy compared to modern editors. Displaying text can take a long time. Opening a very large text file can hang your entire system.
- Using Emacs will make you look very old and out-of-touch.

I don‚Äôt recommend religiously using Emacs only. It‚Äôs just a tool, and a bad one for many tasks. The whole point of Emacs, in my opinion, is to save time. If you‚Äôre writing Java, C#, or mobile apps, you‚Äôre not saving time by using Emacs to do it, you‚Äôre wasting yours and everyone else you‚Äôre working with‚Äôs time. Also, believe it or not üôÉ: You can run Emacs /and/ an IDE at the same time to work on the same project. Crazy stuff, I know.
*** Vim
Vim is what I originally started with. It‚Äôs great. It‚Äôs the best tool for text editing, which should make it the best text editor if text editing were all we did with ‚Äútext editors‚Äù. You‚Äôll find yourself wanting more features than just a text editor.

Clearly a lot of thought went into vi keybindings. I have to admit they are highly productive. I use evil-mode in Emacs and vi emulators in any other IDEs I use.

Vim is a great editor missing an OS.
** IDEs
*** Visual Studio
The best C++ IDE in existence. Such a shame that it is stuck to Windows.
*** PyCharm
Really useful for larger Python projects. Recommended.
* Shell
** zsh
zsh is better than bash. Switch.
** Python or Ruby
If you have to write a script that will ever be used again in the future by you or someone else, then don‚Äôt write it in any shell script. Please use Python or Ruby (not Perl‚Äîthat‚Äôs as unreadable as shell). Shell script is for one-off actions.

Shell scripts aren‚Äôt ‚Äúreal‚Äù languages. They don‚Äôt have utilites for abstraction beyond just subroutines. Shell scripts aren‚Äôt maintainable. It‚Äôs a lot harder to read shell script. Everyone knows Python and Ruby. Use one of those.

- Everyone knows Python and Ruby
- Python and Ruby are readable
- Python and Ruby are maintainable
- Python and Ruby can make system calls directly instead of forking processes for every line of code; much better performance

There are some people who use IPython as their system shell and never touch bash. I think that‚Äôs a little extreme, but it‚Äôs certainly possible.
* Programming languages
/‚ÄúUse the right tool for the job!,‚Äù/ you hear condescendingly from the mature people whenever you talk about favorite programming languages. But I think this view is dated in today‚Äôs world since there are several competing popular languages/environments for every domain of software development. Some of them have to be objectively bad, the metric being their amenability to producing good software. I don‚Äôt and can‚Äôt accept the idea that X language is /just as good/ as Y no more than I accept that PHP and Python are on the same level because they‚Äôre both Turing complete.
** How to judge programming languages
You judge programming languages by judging the programs that have been developed using it. And the way you judge programs is by seeing the market response by the users of those programs.

The /worst/ way to judge a programming language is to judge it by how it relates to programmer sensibilities. What a programmer (no matter what skill level) thinks the best language is, is barely a relevant question. They don‚Äôt matter. The bad programmers will say the language they have used the most because they only know one or two languages. The good programmers will tell you Haskell is the best language because they see programming as a fun intellectual game rather than an industrial endeavor like drilling for oil. In general, you shouldn‚Äôt judge a field by what the people within the field say because it will eventually lead to abstract academic bloviating divorced from any real world stress-testing that an exposure to actual users would reveal.

The older a programming language, the better. If an old language is still being used enough for you to care about it, it survived brutal selection in the free market. You win no points by being an early adopter of a technology tool, only a massive risk of your precious time. Joe Programmer can just as easily pick up your pet tool a few years down the line if it miraculously lasts that long and gains traction. Within a couple months, Joe Programmer now is [[https://en.wikipedia.org/wiki/Pareto_principle][80%]] as functionally skilled as you are. On this basis I would argue that you are better off learning COBOL and FORTRAN than any language created in the past 10 years. More on this in other writings.

Last on the list, I consider the /aesthetics/ of the language to be important. I‚Äôm not talking about syntax per se. Code in an Aesthetic Language gives you a feeling of freedom and makes you happy to see it. An Aesthetic Language makes it very easy to write easy-to-read code. You /feel/ like you can do anything with the language because the syntax isn‚Äôt holding you back. The most Aesthetic Language that comes to mind is Common Lisp---you are stripped of all the limitations of traditional structured programming languages and are free to express yourself in constructs you make yourself (Lisp macros). Ruby is also an Aesthetic Language. By contrast, an Ugly Language is C because everything is either an if statement, a glorified goto/jump, or a for loop, forcing you to encode your solution space in this tiny vocabulary as if you‚Äôre an assembly programmer from the 1970s. This is completely my personal take; feel free to dismiss this aspect of programming language selection. But I‚Äôd rather live in a world with less PHP even though PHP is probably one of the top 3 programming languages by the amount of wealth generated (read: Facebook).
** Languages
*** by use case
**** general purpose
1. Java
2. Rust
3. C++
4. Common Lisp
**** scripting (one-off)
1. Ruby
2. Python
**** science/stats/machine learning
1. Python
**** web services
1. Java
2. Golang
*** Reviews
**** C++
The ultimate industrial powerhouse Swiss army knife of languages.

You‚Äôre running a program(s) written in C++ to read this right now. It‚Äôs faster than everything, and it can do everything better than anyone else can. It can go as low level as inline ASM, backwards compatibility with C, then all the way up to Pythonic hipster one-liners. It has features for everything, the whole kitchen sink, and that‚Äôs a good thing.

I don‚Äôt care how hard it is to use. The ends justify the means here.

C++ being behind almost every good piece of software in existence is kind of proof that you shouldn‚Äôt listen to what programmers say about what languages are the best. C++ is one of the most hated languages. Yes, it‚Äôs memory unsafe. Yes, it‚Äôs dangerous. Yes, it‚Äôs needlessly complicated. Yes, it has way too many features, most of which are bad. Ever considered that (shockingly) maybe these are necessary side effects of the reasons for its success, and the abstract criteria by which it is criticized actually don‚Äôt matter. After a ruler keeps giving inaccurate measurements for tables over and over, when do you stop blaming the table manufacturers and start looking for a new ruler instead?

You have definitely been on an airplane running C++. The stock market market runs on C++. All performance-critical systems are written in C++, like the major deep learning frameworks. C++ is the language of important things.

100 years from now I guarantee you, barring civilizational collapse, you will still trust your life to C++.
**** Common Lisp
***** Literally the best programming language
Common Lisp is the most important programming language you will ever learn. The macro is the killer feature; you can write your own syntax constructs and domain-specific languages. Write in Lisp and you don‚Äôt need any other language.

Yes there are a lot of parentheses, but the benefit is that the syntax is extremely straightforward. The program is represented as a linked list. The grammar for the whole language can fit on a page.

Despite being so old, Lisp does seem like the logical endpoint of all programming languages. It is a programmable programming language. The full power of the compiler is available to you as normal code, not some escape hatch as is the case with the C preprocessor. Also despite being so old, it refuses to die.

Lisp, in its essence, is such a simple idea that even if it were forgotten in a nuclear war that it would reappear again once computers were created. Lisp is a universal shelling point for computer programming. This is why the unofficial mascot for Lisp is an alien.
***** recommended implementation
SBCL
***** If LISP is so good, why did it fail?
- [[https://groups.google.com/forum/#!topic/comp.lang.lisp/eicqvm3GXiE][The Bipolar Lisp Programmer]]
- [[http://winestockwebdesign.com/Essays/Lisp_Curse.html][The Lisp Curse]]
- [[https://www.jwz.org/doc/worse-is-better.html][Worse Is Better]]
**** Scheme
***** best implementations
****** Chez Scheme
- Compiles to very efficient machine code; ideal for deployment
- Used by Cisco for years before they open sourced it
- Author is a genius
****** GNU Kawa
- Compiles to portable JVM bytecode
- Entire JVM ecosystem available with convenient interop syntax
****** Racket
- Easiest to get started with
- Con: Not really Scheme. Tries too hard to be a functional language. (Scheme and LISP style languages in general are /not/ functional languages, nor should they be.)
**** Golang
Golang is basically a DSL for writing web servers and web services. It is /phenomenal/ at this. Golang gives you all the batteries you need to write very good web and networking software and the battle-testedness that comes with it being used by big corporations for this purpose.

Personally I really don‚Äôt like the language. It is very restrictive. I understand the need it was trying to solve though. It is healthier for a long-term project to enforce hyper-simplistic standards because realistically there will be a lot of unrelated people working on it over time. Golang in this way aims to take Java‚Äôs place as the line-of-business, commodity programmer‚Äôs language. Imagine you manage hundreds of people, mostly remote, working on some boring web app. Use Golang. Except Golang gives you less rope than Java does, so it‚Äôs even better for this.
**** JavaScript
Use Typescript instead. It is a superset of Javascript.
**** Java
Java gets far too much hate. It‚Äôs the best language and ecosystem for 99% of applications.
**** Ruby
More enjoyable to work with than Python, but its community is dying since Rails has lost steam.
**** Python
Default programming language for everything. There‚Äôs nothing positive or negative to say about it. If you hate it, you‚Äôre doing yourself a disservice by missing out on convenient the ecosystem of tools. If you like it, you probably shouldn‚Äôt.
**** Haskell
A largely useless language fraught with legend and myth but that otherwise no one uses. I wasted some time with this language and functional languages in general so you don‚Äôt have to.

Doing FP makes you a better programmer because you're writing programs. I'm taking the null hypothesis that after a year of writing functional code you would have improved just as much as you would have writing non-functional code. I have literally never seen anything to demonstrate otherwise other than hand waving and personal anecdotes.

Functional programming selects for better than average programmers to begin with--the "programmer's programmer" that writes code for fun and probably visits this site. You're unlikely to convince to learn Haskell the person who writes enterprise .NET, never used anything but Windows, and who never opened a text editor after work. The functional programmers were already good before they became functional programmers. Then you get the cargo cult type of intrigue. "X writes really good code. X also uses $FP_LANG! Be more like X!"

And no, functional programming isn‚Äôt taking over. The ‚Äúlambdas‚Äù that appear with much hype in new programming language releases have nothing to do with FP lambdas. A lambda in functional programming is supposed to be a primitive you use to [[https://en.wikipedia.org/wiki/Fixed-point_combinator#Fixed_point_combinators_in_lambda_calculus][do]] [[https://en.wikipedia.org/wiki/Lambda_calculus][everything]]. In Java 8/C++11/Swift, the lambdas you speak of are used only as sugar for lexically embedded subroutines so that you don‚Äôt need to declare another subroutine.

Like category theory? Study category theory. Then at least what you learn will have relevance to more than just a man-made story like one programming language. (Never forget that all programming languages are just man-made stories about how the machine works with varying conformance to reality.)
*** Trash Languages
**** C
C is the worst thing to happen to computing. It is sadly responsible for existence of the entire computer security industry. The sooner it is extinguished from this earth, the better off we will be.

C is unsafe. C is easy to reverse engineer. C is ugly.

There is no ‚ÄúC/C++‚Äù. C++ is an entirely different language that lets you write reasonably safe code in reasonable time. Doing anything in C ends up being a long research project‚Äîthat you‚Äôll probably have to scrap and rewrite in the end because it has so many memory leaks.
**** PHP
Spaghetti code. Spaghetti code everywhere.

The most important thing to learn from PHP, as a programming language critic, is how important Time To Hello World is. PHP owes basically all of its success to the fact that you can, with minimal to zero configuration on most servers, write something like this:

#+BEGIN_SRC php
<html><body><h1>Welcome,
<?php
$s = $mysqli->prepare("select name from customers where id=?");
$s->bind_param("i", $_GET["id"]);
$s->execute();
$row = $s->get_result()->fetch_assoc();
echo $row["name"];
?>
</h1></body></html>
#+END_SRC

...and just like that, you can hack together the controller, model, and view for a webapp all in one go. Of course for anything non-trivial, this could easily and does get out of hand.

There is no technical reason for the language‚Äôs success. It has more warts than JavaScript did in the Internet Explorer days. I‚Äôm convinced its adoption is just because LAMP servers were so widely deployed in the 2000s, and anyone could get started with PHP without having to fiddle with compilers, build scripts, external libraries, or any of the things used in contemporary software development. It was the Visual Basic for the web.

If I were designing a programming language hoping for it to be widely adopted, I would make sure it passes the PHP Test: /Does it let me bootstrap a webapp (or perhaps a mobile app) just by writing one text file and uploading it somewhere?/
**** Perl
Dead camel
**** Clojure
Clojure is not LISP. It sacrifices way too much to run on the JVM. (Not that I think being a hosted language was a bad idea---it just should have been LLVM.) Clojure is an internal tool used by Rich Hickey‚Äôs database company. I feel sorry for people whose only exposure to Lisp is Clojure.
* Databases
** PostgreSQL
PostgreSQL is a long-term support tech stack. Too many people rely on it, like Apache, but it‚Äôs also actually good. You need a very good reason to use anything else.
* Fonts
** serif
*** Baskerville
Baskerville was found to be the [[https://opinionator.blogs.nytimes.com/2012/08/08/hear-all-ye-people-hearken-o-earth/][most trustworthy]] font on empirical testing.
*** Charter
Very beautiful font for body text. I believe that serif fonts are more readable. Charter is one of the best serif fonts I have come across, and it‚Äôs available for free.
** monospace
*** Go Mono
[[https://blog.golang.org/go-fonts][Go Mono]] is part of a family of fonts from the Golang team. Unlike any other monospaced fonts I have seen, Go Mono kind of looks like a serif font. I really think serif fonts are ideal for readability.
*** Fira Mono
Beautiful monospaced font from Mozilla.
*** Operator Mono
The Lamborghini of programming fonts. This is, as of the time of writing, [[https://www.typography.com/fonts/operator/styles/][the most expensive programming fonts]]. It does look good.
*** IBM Plex Mono
** sans serif
*** Adelle Sans
*** San Francisco
* Cryptocurrency
** Bitcoin
- Game changer for individual freedom
- Historical value
- Capped supply motivates a game theoretic boost in its market value
- Currency of the internet
- First mover advantage
** Ethereum
Designed for a world that does not exist yet. There aren‚Äôt any uses for smart contracts. But there should eventually be a use for Turing-complete money. When the need arrives, Ethereum will be the most prepared to fill that role. Owning Ethereum is kind of a call option on a future high-tech decentralized economy.
** Monero
Monero implements the ideal of cryptocurrency as an anonymous, fungible, censorship-resistant electronic cash. As long as Bitcoin has value, Monero should too, so it should remain as a way for people to use currency without interference from totalitarian governments.
** Everything else
Everything besides Bitcoin is a [[https://blog.bitmex.com/ether-a-double-digit-shitcoin/][scam]] anyway.
